## Reference files
HGSVC_BED="bed/hg38_non_repeats.bed"
REF38="hg38.fa"
GIAB_BED="bed/HG002_SVs_Tier1_v0.6.bed"
REF37="hs37d5.fa"

#### Enumerate all the output TSV files
EVALOUT = ['prcurve', 'persize']
REGS = 'all nonrep'.split()
EVAL = 'call geno'.split()
METHODS  = 'vg delly svtyper bayestyper paragraph vgsub'.split()
## HGSVC real reads
SAMPLES = 'HG00514 HG00733 NA19240'.split()
HGSVC_TSVS = expand('tsv/hgsvc-{method}-{sample}-{region}-{eval}-{evalout}.tsv', method=METHODS,
                    sample=SAMPLES, region=REGS, eval=EVAL, evalout=EVALOUT)
## HGSVC simulated reads
HGSVC_TSVS += expand('tsv/hgsvcsim-{method}-HG00514-{region}-{eval}-{evalout}.tsv', method=METHODS,
                     region=REGS, eval=EVAL, evalout=EVALOUT)
#### GIAB5
GIAB5_TSVS = expand('tsv/giab5-{method}-HG002-{region}-{eval}-{evalout}.tsv', method=METHODS,
                    region=REGS, eval=EVAL, evalout=EVALOUT)
#### SVPOP
METHODS  = 'vg smrtsv vgsub paragraph'.split()
SAMPLES = 'HG00514 HG00733 NA19240'.split()
SVPOP_TSVS = expand('tsv/svpop-{method}-{sample}-{region}-call-{evalout}.tsv', method=METHODS,
                    sample=SAMPLES, region=REGS, evalout=EVALOUT)
#### pseudo-diploid CHM sample
METHODS  = 'vg smrtsv vgsub'.split()
EVAL = 'call geno'.split()
CHMPD_TSVS = expand('tsv/chmpd-{method}-chmpd-{region}-{eval}-{evalout}.tsv', method=METHODS,
                    region=REGS, eval=EVAL, evalout=EVALOUT)

## For the region analysis
REP_BED="bed/hg38_repeats.bed"
NOCALLS_BED="bed/nocalls-HG00514-smrtsv.bed"
CALLED_BED="bed/called-HG00514-smrtsv.bed"

## For the pre-region exploration with SMRT-SV
SVPOP_REGIONS = expand('tsv/svpop-{method}-HG00514-{region}-call-prcurve.tsv', method=['vg', 'smrtsv'], region=['all', 'nonrep', 'rep', 'nocalls', 'called'])

## What to use for each experiment
ref = {'hgsvc': REF38, 'giab5': REF37, 'hgsvcsim': REF38,
       'svpop': REF38, 'chmpd': REF38}
hqbed = {'hgsvc': HGSVC_BED, 'giab5': GIAB_BED, 'hgsvcsim': HGSVC_BED,
         'svpop': HGSVC_BED, 'chmpd': HGSVC_BED}


## Rules
rule all:
    input:
        HGSVC_TSVS,
        GIAB5_TSVS,
        SVPOP_TSVS,
        CHMPD_TSVS,
        SVPOP_REGIONS

rule hgsvc:
    input:
        HGSVC_TSVS

rule giab5:
    input:
        GIAB5_TSVS

rule svpop:
    input:
        SVPOP_TSVS

rule chmpd:
    input:
        CHMPD_TSVS

rule svpopregions:
    input:
        SVPOP_REGIONS


rule vcfnorm:
    input:
        vcf="vcf/{exp}-{method}-{sample}.vcf.gz",
    output:
        "vcf/{exp}-{method}-{sample}.norm.vcf.gz"
    run:
        REF = ref[wildcards.exp]
        shell('bcftools view {input.vcf} --exclude \'GT="0" || GT="." || GT="1"\' | bcftools norm - --fasta-ref {REF} --multiallelic -both | bcftools norm - --fasta-ref {REF} --multiallelic +both | bgzip > {output}')

def evalinputs(wildcards):
    ins = {}
    ins['vcf'] = 'vcf/{}-{}-{}.norm.vcf.gz'.format(wildcards.exp, wildcards.method,
                                                   wildcards.sample)
    ins['truth'] = 'vcf/{}-truth-baseline.norm.vcf.gz'.format(wildcards.exp)
    if wildcards.region == 'nonrep':
        ins['bed'] = hqbed[wildcards.exp]        
    if wildcards.region == 'rep':
        ins['bed'] = REP_BED
    if wildcards.region == 'nocalls':
        ins['bed'] = 'bed/nocalls-{}-smrtsv.bed'.format(wildcards.sample)
    if wildcards.region == 'called':
        ins['bed'] = 'bed/called-{}-smrtsv.bed'.format(wildcards.sample)
    return ins

rule sveval:
    input:
        unpack(evalinputs)
    output:
        "rdata/sveval-{exp}-{method}-{sample}-{region}-{eval}.RData"
    run:
        INV = wildcards.exp == 'svpop'
        BED = "NA"
        if wildcards.region != 'all':
            BED = input.bed
        GENO = wildcards.eval == 'geno'
        SAMP = wildcards.sample
        if wildcards.sample == 'chmpd':
            SAMP = 'PSEUDOSET'
        shell('Rscript sveval.R {input.vcf} {input.truth} {SAMP} {INV} {BED} {GENO} {output}')

rule parseeval:
    input:
        "rdata/sveval-{exp}-{method}-{sample}-{region}-{eval}.RData"
    output:
        pr="tsv/{exp}-{method}-{sample}-{region}-{eval}-prcurve.tsv",
        ps="tsv/{exp}-{method}-{sample}-{region}-{eval}-persize.tsv"
    run:
        shell("Rscript parseeval.R {input} {output}")

rule findnocalls:
    input:
        "vcf/svpop-smrtsv-{sample}.norm.vcf.gz"
    output:
        nocall="bed/nocalls-{sample}-smrtsv.bed",
        called="bed/called-{sample}-smrtsv.bed"
    run:
        TRUTH="vcf/svpop-truth-baseline.norm.vcf.gz"
        shell("Rscript findNocallsRegions.R {TRUTH} {wildcards.sample} {output.nocall} {output.called} {input}")
        

## Same analysis with more stringent threshold when matching baseline and called SVs
STRINGENT_TSVS = HGSVC_TSVS + GIAB5_TSVS + SVPOP_TSVS + CHMPD_TSVS
STRINGENT_TSVS = [tsv.replace('.tsv', '_stringent.tsv') for tsv in STRINGENT_TSVS]

rule stringent:
    input:
        STRINGENT_TSVS

rule sveval_stringent:
    input:
        vcf="vcf/{exp}-{method}-{sample}.norm.vcf.gz",
        truth="vcf/{exp}-truth-baseline.norm.vcf.gz"
    output:
        "rdata/sveval_stringent-{exp}-{method}-{sample}-{region}-{eval}.RData"
    run:
        INV = wildcards.exp == 'svpop'
        BED = "NA"
        if wildcards.region == 'nonrep':
            BED = hqbed[wildcards.exp]
        GENO = wildcards.eval == 'geno'
        SAMP = wildcards.sample
        if wildcards.sample == 'chmpd':
            SAMP = 'PSEUDOSET'
        shell('Rscript sveval.R {input.vcf} {input.truth} {SAMP} {INV} {BED} {GENO} {output} 0.9')

rule parseeval_stringent:
    input:
        "rdata/sveval_stringent-{exp}-{method}-{sample}-{region}-{eval}.RData"
    output:
        pr="tsv/{exp}-{method}-{sample}-{region}-{eval}-prcurve_stringent.tsv",
        ps="tsv/{exp}-{method}-{sample}-{region}-{eval}-persize_stringent.tsv"
    run:
        shell("Rscript parseeval.R {input} {output}")

